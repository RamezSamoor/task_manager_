// Mocks generated by Mockito 5.4.2 from annotations
// in task_manager_app/test/home/home_service_test.dart.
// Do not manually edit this file.

// ignore_for_file: no_leading_underscores_for_library_prefixes
import 'dart:async' as _i4;

import 'package:mockito/mockito.dart' as _i1;
import 'package:task_manager_app/features/home/models/todo_model.dart' as _i2;

import 'home_service_test.dart' as _i3;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types
// ignore_for_file: subtype_of_sealed_class

class _FakeListTodos_0 extends _i1.SmartFake implements _i2.ListTodos {
  _FakeListTodos_0(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeTodos_1 extends _i1.SmartFake implements _i2.Todos {
  _FakeTodos_1(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

/// A class which mocks [HomeServiceTest].
///
/// See the documentation for Mockito's code generation for more information.
class MockHomeServiceTest extends _i1.Mock implements _i3.HomeServiceTest {
  MockHomeServiceTest() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i4.Future<_i2.ListTodos> getTodos(
    int? limit,
    int? skip,
  ) =>
      (super.noSuchMethod(
        Invocation.method(
          #getTodos,
          [
            limit,
            skip,
          ],
        ),
        returnValue: _i4.Future<_i2.ListTodos>.value(_FakeListTodos_0(
          this,
          Invocation.method(
            #getTodos,
            [
              limit,
              skip,
            ],
          ),
        )),
      ) as _i4.Future<_i2.ListTodos>);

  @override
  _i4.Future<_i2.Todos> deleteTodo(int? todoId) => (super.noSuchMethod(
        Invocation.method(
          #deleteTodo,
          [todoId],
        ),
        returnValue: _i4.Future<_i2.Todos>.value(_FakeTodos_1(
          this,
          Invocation.method(
            #deleteTodo,
            [todoId],
          ),
        )),
      ) as _i4.Future<_i2.Todos>);

  @override
  _i4.Future<_i2.Todos> updateTodo(
    String? todoId,
    _i2.Todos? todoBody,
  ) =>
      (super.noSuchMethod(
        Invocation.method(
          #updateTodo,
          [
            todoId,
            todoBody,
          ],
        ),
        returnValue: _i4.Future<_i2.Todos>.value(_FakeTodos_1(
          this,
          Invocation.method(
            #updateTodo,
            [
              todoId,
              todoBody,
            ],
          ),
        )),
      ) as _i4.Future<_i2.Todos>);

  @override
  _i4.Future<_i2.Todos> addTodo(_i2.Todos? todoBody) => (super.noSuchMethod(
        Invocation.method(
          #addTodo,
          [todoBody],
        ),
        returnValue: _i4.Future<_i2.Todos>.value(_FakeTodos_1(
          this,
          Invocation.method(
            #addTodo,
            [todoBody],
          ),
        )),
      ) as _i4.Future<_i2.Todos>);
}
